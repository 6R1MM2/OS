
#include <iostream>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <cstdlib>
#include <cstdio>
#include <unistd.h>
using namespace std;


struct SimClock {                   //simulated clock
    int seconds;
    int nanoseconds;
};




int main() {                        //Makes a key for the shared memory segment with ftok
                                    //ftok then works by converting pathname and project identifier into the key
                                    //oss.cpp is the file being used, and the S is project iD
    key_t key = ftok("oss.cpp", 'S');
    if(key == -1) {
        perror("ftok failed");
        exit(EXIT_FAILURE);
    }

   


                                    //Creates shared memory segment with shmget
                                    //Takes in the key generated by ftok, the size of the memory segment
                                    //IPC_CREAT is a flag, simply creates the resource if it doesn't exist, 0666 sets the permissions
    int shmid = shmget(key, sizeof(SimClock), IPC_CREAT | 0666);
    if(shmid == -1) {
        perror("shmget failed");
        exit(EXIT_FAILURE);
    }



    // attaches the shared memory segment (from shmid) to this process address space
    //casting the returned void pointer to a SimClock pointer for easy access to the shared clock
    SimClock* clock = (SimClock*) shmat(shmid, nullptr, 0);


    if(clock == (void*) -1) {
        perror("shmat failed");
        exit(EXIT_FAILURE);
    }

   
    clock->seconds = 5;
    clock->nanoseconds = 1000;


  
    if(shmdt(clock) == -1) {
        perror("shmdt failed");
    }
    if(shmctl(shmid, IPC_RMID, nullptr) == -1) {
        perror("shmctl failed");
    }

    cout << "OSS: cleaned shared memory and exited" << endl;
    return 0;
}
